data1=read.csv("C:/Users/shilpi.x.singh/Downloads/CarPrice_Assignment.csv")
library(caret)
require(caTools)
sample=sample.split(data1,SplitRatio=.7)
train1 =subset(data1,sample==TRUE) # creates a training dataset named train1 with rows which are marked as TRUEdata
test1 =subset(data1,sample==FALSE)# creates a training dataset named test1 with rows which are marked as False
# mod1: the assigned model structure
mod1=lm((price)~symboling+as.factor(CarName_1)+as.factor(fueltype)+as.factor(doornumber)+as.factor(carbody)+as.factor(drivewheel)+as.factor(enginelocation)+wheelbase+carlength+carwidth+carheight+curbweight+as.factor(cylindernumber_bin)+enginesize+stroke+compressionratio+peakrpm+citympg+highwaympg,data=train1)
library(MASS)
step.mod1=stepAIC(mod1,direction = "both")
mod2=lm((price)~as.factor(CarName_1)+as.factor(carbody)+as.factor(enginelocation)+wheelbase+carlength+curbweight+as.factor(cylindernumber_bin)+peakrpm,data=train1)
### Cross validation of the model using out-of-sample data ###
pred_val=predict(mod2,test1)#The predicted values of price assigned to the variable named 'pred_val'.
# finding correlation between actual values in test1 and predicted value of price from the model
cor(test1$price,pred_val)
### Cross validation of the model using out-of-sample data ###
pred_val=predict(mod2,test1)#The predicted values of price assigned to the variable named 'pred_val'.
mod2=lm((price)~as.factor(CarName_1)+as.factor(carbody)+as.factor(enginelocation)+wheelbase+carlength+curbweight+as.factor(cylindernumber_bin)+peakrpm,data=train1)
### Cross validation of the model using out-of-sample data ###
pred_val=predict(mod2,test1)#The predicted values of price assigned to the variable named 'pred_val'.
sample=sample.split(data1,SplitRatio=.7)
train1 =subset(data1,sample==TRUE) # creates a training dataset named train1 with rows which are marked as TRUEdata
test1 =subset(data1,sample==FALSE)# creates a training dataset named test1 with rows which are marked as False
# mod1: the assigned model structure
mod1=lm((price)~symboling+as.factor(CarName_1)+as.factor(fueltype)+as.factor(doornumber)+as.factor(carbody)+as.factor(drivewheel)+as.factor(enginelocation)+wheelbase+carlength+carwidth+carheight+curbweight+as.factor(cylindernumber_bin)+enginesize+stroke+compressionratio+peakrpm+citympg+highwaympg,data=train1)
library(MASS)
step.mod1=stepAIC(mod1,direction = "both")
mod2=lm((price)~as.factor(CarName_1)+as.factor(carbody)+as.factor(enginelocation)+wheelbase+carlength+curbweight+as.factor(cylindernumber_bin)+peakrpm,data=train1)
### Cross validation of the model using out-of-sample data ###
pred_val=predict(mod2,test1)#The predicted values of price assigned to the variable named 'pred_val'.
# finding correlation between actual values in test1 and predicted value of price from the model
cor(test1$price,pred_val)
### Cross validation of the model using out-of-sample data ###
pred_val=predict(mod2,test1)#The predicted values of price assigned to the variable named 'pred_val'.
#Import file using "Import Dataset"
data1=read.csv("C:/Users/shilpi.x.singh/Downloads/CarPrice_Assignment.csv")
library(caret)
require(caTools)
sample=sample.split(data1,SplitRatio=.7)
train1 =subset(data1,sample==TRUE) # creates a training dataset named train1 with rows which are marked as TRUEdata
test1 =subset(data1,sample==FALSE)# creates a training dataset named test1 with rows which are marked as False
# mod1: the assigned model structure
mod1=lm((price)~symboling+as.factor(CarName_1)+as.factor(fueltype)+as.factor(doornumber)+as.factor(carbody)+as.factor(drivewheel)+as.factor(enginelocation)+wheelbase+carlength+carwidth+carheight+curbweight+as.factor(cylindernumber_bin)+enginesize+stroke+compressionratio+peakrpm+citympg+highwaympg,data=train1)
summary(mod1)
library(MASS)
step.mod1=stepAIC(mod1,direction = "both")
mod2=lm((price)~as.factor(CarName_1)+as.factor(carbody)+as.factor(enginelocation)+wheelbase+carlength+curbweight+as.factor(cylindernumber_bin)+peakrpm,data=train1)
### Cross validation of the model using out-of-sample data ###
pred_val=predict(mod2,test1)#The predicted values of price assigned to the variable named 'pred_val'.
# finding correlation between actual values in test1 and predicted value of price from the model
cor(test1$price,pred_val)
#calculate the root mean squared error of the residuals(RMSE)
sqrt(mean((test1$price-pred_val)^2))
#shapiro wilk test to check weather normality assumption is satisfied with null Hypothesis as data is normally distributed
shapiro.test(mod2$residuals)
#Log transformation of response variable
bc_mod1=boxcox(mod2,lambda=seq(-1.5,1.5))
best.lam=bc_mod1$x[which(bc_mod1$y==max(bc_mod1$y))]
fullmodel=lm((price)^0.3~as.factor(CarName_1)+as.factor(carbody)+as.factor(enginelocation)+wheelbase+carlength+curbweight+as.factor(cylindernumber_bin)+peakrpm,data=train1)
# Checking Normality of transformed model
shapiro.test(fullmodel$residuals)
plot(fullmodel)
dwtest(fullmodel)
library(lmtest)
source("C:/Users/shilpi.x.singh/OneDrive - Accenture/shilpi.x.singh/upGrad/Regression project/CarPrice_Rgression Project.R")
#Import file using "Import Dataset"
data1=read.csv("C:/Users/shilpi.x.singh/Downloads/CarPrice_Assignment.csv")
library(caret)
require(caTools)
sample=sample.split(data1,SplitRatio=.7)
train1 =subset(data1,sample==TRUE) # creates a training dataset named train1 with rows which are marked as TRUEdata
test1 =subset(data1,sample==FALSE)# creates a training dataset named test1 with rows which are marked as False
# mod1: the assigned model structure
mod1=lm((price)~symboling+as.factor(CarName_1)+as.factor(fueltype)+as.factor(doornumber)+as.factor(carbody)+as.factor(drivewheel)+as.factor(enginelocation)+wheelbase+carlength+carwidth+carheight+curbweight+as.factor(cylindernumber_bin)+enginesize+stroke+compressionratio+peakrpm+citympg+highwaympg,data=train1)
library(MASS)
step.mod1=stepAIC(mod1,direction = "both")
mod2=lm((price)~as.factor(CarName_1)+as.factor(carbody)+as.factor(enginelocation)+wheelbase+carlength+curbweight+as.factor(cylindernumber_bin)+peakrpm,data=train1)
### Cross validation of the model using out-of-sample data ###
pred_val=predict(mod2,test1)#The predicted values of price assigned to the variable named 'pred_val'.
#Import file using "Import Dataset"
data1=read.csv("C:/Users/shilpi.x.singh/Downloads/CarPrice_Assignment.csv")
library(caret)
require(caTools)
sample=sample.split(data1,SplitRatio=.7)
train1 =subset(data1,sample==TRUE) # creates a training dataset named train1 with rows which are marked as TRUEdata
test1 =subset(data1,sample==FALSE)# creates a training dataset named test1 with rows which are marked as False
# mod1: the assigned model structure
mod1=lm((price)~symboling+as.factor(CarName_1)+as.factor(fueltype)+as.factor(doornumber)+as.factor(carbody)+as.factor(drivewheel)+as.factor(enginelocation)+wheelbase+carlength+carwidth+carheight+curbweight+as.factor(cylindernumber_bin)+enginesize+stroke+compressionratio+peakrpm+citympg+highwaympg,data=train1)
library(MASS)
step.mod1=stepAIC(mod1,direction = "both")
mod2=lm((price)~as.factor(CarName_1)+as.factor(carbody)+as.factor(enginelocation)+wheelbase+carlength+curbweight+as.factor(cylindernumber_bin)+peakrpm,data=train1)
### Cross validation of the model using out-of-sample data ###
pred_val=predict(mod2,test1)#The predicted values of price assigned to the variable named 'pred_val'.
# finding correlation between actual values in test1 and predicted value of price from the model
cor(test1$price,pred_val)
#calculate the root mean squared error of the residuals(RMSE)
sqrt(mean((test1$price-pred_val)^2))
#to check normality of errors
plot(mod2)
#Log transformation of response variable
bc_mod1=boxcox(mod2,lambda=seq(-1.5,1.5))
best.lam=bc_mod1$x[which(bc_mod1$y==max(bc_mod1$y))]
fullmodel=lm((price)^0.3~as.factor(CarName_1)+as.factor(carbody)+as.factor(enginelocation)+wheelbase+carlength+curbweight+as.factor(cylindernumber_bin)+peakrpm,data=train1)
# Checking Normality of transformed model
shapiro.test(fullmodel$residuals)
library(lmtest)
library(lmtest)
dwtest(fullmodel)
library(car)
vif(fullmodel)
fullmodel_1=lm((price)^0.3~as.factor(carbody)+as.factor(enginelocation)+wheelbase+carlength+curbweight+as.factor(cylindernumber_bin)+peakrpm,data=train1)
vif(fullmodel_1)
pred_val=predict(fullmodel_1,test1)#The predicted values of price assigned to the variable named 'pred_val'.
cor(test1$price,pred_val)
#calculate the root mean squared error of the residuals(RMSE)
sqrt(mean((test1$price-pred_val)^2))
source("C:/Users/shilpi.x.singh/OneDrive - Accenture/shilpi.x.singh/upGrad/Regression project/CarPrice_Rgression Project.R")
#Log transformation of response variable
bc_mod1=boxcox(mod2,lambda=seq(-3,3))
#Log transformation of response variable
bc_mod1=boxcox(mod2,lambda=seq(-3,3))
mod2=lm((price)~as.factor(CarName_1)+as.factor(carbody)+as.factor(enginelocation)+wheelbase+carlength+carwidth+carheight+curbweight+enginesize,data=train1)
### Cross validation of the model using out-of-sample data ###
pred_val=predict(mod2,test1)#The predicted values of price assigned to the variable named 'pred_val'.
# finding correlation between actual values in test1 and predicted value of price from the model
cor(test1$price,pred_val)
#Log transformation of response variable
bc_mod1=boxcox(mod2,lambda=seq(-3,3))
#Log transformation of response variable
bc_mod1=boxcox(mod2)
library(MASS)
#Log transformation of response variable
bc_mod1=boxcox(mod2)
#Log transformation of response variable
bc_mod1=boxcox(mod2,lambda=seq(-3,3))
fullmodel=lm((price)^0.19~as.factor(CarName_1)+as.factor(carbody)+as.factor(enginelocation)+wheelbase+carlength+carwidth+carheight+curbweight+enginesize,data=train1)
# Checking Normality of transformed model
shapiro.test(fullmodel$residuals)
fullmodel=lm((price)^0.03~as.factor(CarName_1)+as.factor(carbody)+as.factor(enginelocation)+wheelbase+carlength+carwidth+carheight+curbweight+enginesize,data=train1)
# Checking Normality of transformed model
shapiro.test(fullmodel$residuals)
fullmodel=lm((price)^0.19~as.factor(CarName_1)+as.factor(carbody)+as.factor(enginelocation)+wheelbase+carlength+carwidth+carheight+curbweight+enginesize,data=train1)
# Checking Normality of transformed model
shapiro.test(fullmodel$residuals)
source("C:/Users/shilpi.x.singh/OneDrive - Accenture/shilpi.x.singh/upGrad/Regression project/CarPrice_Rgression Project.R")
source("C:/Users/shilpi.x.singh/OneDrive - Accenture/shilpi.x.singh/upGrad/Regression project/CarPrice_Rgression Project.R")
install.packages("ggplot2")
# Checking Normality of transformed model
shapiro.test(fullmodel$residuals)
source("C:/Users/shilpi.x.singh/OneDrive - Accenture/shilpi.x.singh/upGrad/Regression project/CarPrice_Rgression Project.R")
vif(fullmodel_2)
library(car)
vif(fullmodel_2)
fullmodel_2=lm((price)^0.19~as.factor(carbody)+as.factor(enginelocation)+wheelbase+carlength+carwidth+carheight+enginesize,data=train1)
vif(fullmodel_2)
dwtest(fullmodel_2)
library(lmtest)
dwtest(fullmodel_2)
wt=1/lm(abs(fullmodel_2$residuals~fullmodel_2$fitted.values)$fitted.values^2)
wt=1/lm(abs(fullmodel_2$residuals)~fullmodel_2$fitted.values)$fitted.values^2)
wt=1/lm(abs(fullmodel_2$residuals)~fullmodel_2$fitted.values)$fitted.values^2
final=lm((price)^0.19~as.factor(carbody)+as.factor(enginelocation)+wheelbase+carlength+carwidth+carheight+enginesize,data=train1,weights=wt)
dwtest(final)
shapiro.test(final$residuals)
source("C:/Users/shilpi.x.singh/OneDrive - Accenture/shilpi.x.singh/upGrad/Regression project/Car_Regression Project.R")
install.packages("MASS")
#Log transformation of response variable
library(MASS)
bc_mod1=boxcox(mod4)
mod4=lm((price)~as.factor(carbody)+as.factor(enginelocation)+wheelbase+carlength+carwidth+carheight+enginesize,data=train1)
bc_mod1=boxcox(mod4)
bc_mod1=boxcox(mod4)
mod5=lm(log((price)~as.factor(carbody)+as.factor(enginelocation)+wheelbase+carlength+carwidth+carheight+enginesize,data=train1))
dwtest(mod5)
library(lmtest)
dwtest(mod5)
mod5=lm(log((price)~as.factor(carbody)+as.factor(enginelocation)+wheelbase+carlength+carwidth+carheight+enginesize,data=train1))
price1=log(price)
price1=log(train1$price)
mod5=lm((price1)~as.factor(carbody)+as.factor(enginelocation)+wheelbase+carlength+carwidth+carheight+enginesize,data=train1)
dwtest(mod5)
shapiro.test(mod5$residuals)
price1=sqrt(train1$price)
mod5=lm((price1)~as.factor(carbody)+as.factor(enginelocation)+wheelbase+carlength+carwidth+carheight+enginesize,data=train1)
shapiro.test(mod5$residuals)
dwtest(mod5)
View(mod4)
View(mod5)
remove(mod4)
remove(mod5)
remove(wt)
#Rework on model by removing Curbweight
fullmodel_2=lm((price)^0.19~as.factor(carbody)+as.factor(enginelocation)+wheelbase+carlength+carwidth+carheight+enginesize,data=train1)
summary(fullmodel_2)
library(plyr)
just digit: ldply(list(fullmodel_2), model_fullmodel_2_stats)
just digit= ldply(list(fullmodel_2), model_fullmodel_2_stats)
just digit = ldply(list(fullmodel_2), model_fullmodel_2_stats)
just= ldply(list(fullmodel_2), model_fullmodel_2_stats)
just= ldply(list(fullmodel_2), model_fit_stats)
### Cross validation of the model using out-of-sample data ###
pred_val=predict(fullmodel_2,test1)#The predicted values of price assigned to the variable named 'pred_val'.
# finding correlation between actual values in test1 and predicted value of price from the model
cor(test1$price,pred_val)
#calculate the root mean squared error of the residuals(RMSE)
sqrt(mean((test1$price-pred_val)^2))
write.csv("C:/Users/shilpi.x.singh/Downloads/test1.csv")
write.csv(test1,"C:/Users/shilpi.x.singh/Downloads/test1.csv")
